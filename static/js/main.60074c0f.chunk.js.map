{"version":3,"sources":["logo.svg","backface-material/vertex.glsl","backface-material/fragment.glsl","refraction-material/vertex.glsl","refraction-material/fragment.glsl","App.js","serviceWorker.js","util/model-loader.js","backface-material/index.js","refraction-material/index.js","Canvas.js","index.js"],"names":["module","exports","App","className","Boolean","window","location","hostname","match","loader","GLTFLoader","url","id","Promise","resolve","reject","load","gltf","result","model","scene","RefractionMaterial","options","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","uniforms","envMap","value","backfaceMap","resolution","lerp","v0","v1","t","Canvas","handleMouseMove","e","now","Date","dx","screenX","lastMouseX","timestamp","lastX","clientX","innerWidth","lastY","clientY","innerHeight","pointerDown","x","touches","y","velocity","pointer","velocity2","this","render","bind","resize","handleMouseDown","handleMouseUp","vp","width","height","dpr","Math","min","devicePixelRatio","setup","addEventListener","createScene","envFbo","THREE","backfaceFbo","textCanvas","document","createElement","style","renderText","body","append","createBackground","quad","add","createModel","scale","set","camera","position","z","orthoCamera","addEvents","ctx","getContext","canvas","scaleCanvas","font","fillStyle","textAlign","OFFSET","yOFFSET","fillText","layers","renderer","antialias","setSize","setPixelRatio","autoClear","appendChild","domElement","setCrossOrigin","texture","toDataURL","needsUpdate","time","image","type","offset","refractionMaterial","backfaceMaterial","BackfaceMaterial","loadModel","process","children","requestAnimationFrame","clear","rotation","sign","Number","sin","setRenderTarget","material","clearDepth","abs","aspect","updateProjectionMatrix","left","right","top","bottom","ReactDOM","StrictMode","getElementById","fonts","onloadingdone","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60074c0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/vertex.2ded267d.glsl\";","module.exports = __webpack_public_path__ + \"static/media/fragment.28d3296b.glsl\";","module.exports = __webpack_public_path__ + \"static/media/vertex.1468f7a2.glsl\";","module.exports = __webpack_public_path__ + \"static/media/fragment.2d5e6faf.glsl\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nconst loader = new GLTFLoader();\n\nexport default (url, id) => {\n  return new Promise((resolve, reject) => {\n    loader.load(url, gltf => {\n      const result = { model: gltf.scene };\n      resolve(result);\n    });\n  });\n};\n","import { ShaderMaterial, BackSide } from \"three\";\nimport vertexShader from \"./vertex.glsl\";\nimport fragmentShader from \"./fragment.glsl\";\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n\n      void main() {\n        worldNormal = normalize( modelViewMatrix * vec4(normal, 0.)).xyz;\n      \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }`,\n      fragmentShader:`varying vec3 worldNormal;\n\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    });\n  }\n}\n","import { ShaderMaterial } from \"three\";\nimport vertexShader from \"./vertex.glsl\";\nimport fragmentShader from \"./fragment.glsl\";\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      void main() {\n        vec4 worldPosition = modelMatrix * vec4( position, 1.0);\n        worldNormal = normalize( modelViewMatrix * vec4(normal, 0.)).xyz;\n        viewDirection = normalize(worldPosition.xyz - cameraPosition);;\n      \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      \n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      \n      float ior = 1.5;\n      float a = 0.33;\n      \n      vec3 fogColor = vec3(1.0);\n      vec3 reflectionColor = vec3(1.0);\n      \n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow( 1.0 + dot( viewDirection, worldNormal), 3.0 );\n      }\n      \n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n      \n        vec3 backfaceNormal = texture2D(backfaceMap, uv).rgb;\n      \n        vec3 normal = worldNormal * (1.0 - a) - backfaceNormal * a;\n      \n        vec3 refracted = refract(viewDirection, normal, 1.0/ior);\n        uv += refracted.xy;\n      \n        vec4 tex = texture2D(envMap, uv);\n      \n        float fresnel = fresnelFunc(viewDirection, normal);\n      \n        vec4 color = tex;\n      \n        color.rgb = mix(color.rgb, reflectionColor, fresnel);\n      \n        gl_FragColor = vec4(color.rgb, 1.0);\n      }`,\n    });\n\n    this.uniforms = {\n      envMap: { value: options.envMap },\n      backfaceMap: { value: options.backfaceMap },\n      resolution: { value: options.resolution }\n    };\n  }\n}\n","import \"./styles.css\";\nimport loadTexture from \"./util/texture-loader\";\nimport loadModel from \"./util/model-loader\";\nimport * as THREE from \"three\";\nimport BackfaceMaterial from \"./backface-material\";\nimport RefractionMaterial from \"./refraction-material\";\n\nfunction lerp(v0, v1, t) {\n  return v0 * (1 - t) + v1 * t;\n}\nfunction scaleCanvas(canvas, ctx, width, height) {\n  var dpr = window.devicePixelRatio || 1;\n  // Get the size of the canvas in CSS pixels.\n  // Give the canvas pixel dimensions of their CSS\n  // size * the device pixel ratio.\n  canvas.width = width * dpr;\n  canvas.height = height * dpr;\n  var ctx = canvas.getContext(\"2d\");\n  // Scale all drawing operations by the dpr, so you\n  // don't have to worry about the difference.\n  ctx.scale(dpr, dpr);\n}\n\nexport default class Canvas {\n  constructor() {\n    this.render = this.render.bind(this);\n    this.resize = this.resize.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleMouseUp = this.handleMouseUp.bind(this);\n\n    this.vp = {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      dpr: Math.min(devicePixelRatio, 2 || 1),\n    };\n\n    this.velocity = 0.005;\n\n    this.velocity2 = 0.005;\n    this.pointerDown = false;\n    this.pointer = {\n      x: 0,\n      y: 0,\n    };\n    this.setup();\n  }\n\n  addEvents() {\n    window.addEventListener('blur', () => {\n      this.velocity = 0.005;\n      this.dx = 0;\n      this.velocity2 = 0.005;\n    });\n\n    \n    if (\"ontouchmove\" in window) {\n      window.addEventListener(\"touchstart\", this.handleMouseDown);\n      window.addEventListener(\"touchmove\", this.handleMouseMove);\n      window.addEventListener(\"touchend\", this.handleMouseUp);\n    } else {\n      window.addEventListener(\"mousedown\", this.handleMouseDown);\n      window.addEventListener(\"mousemove\", this.handleMouseMove);\n      window.addEventListener(\"mouseup\", this.handleMouseUp);\n    }\n  }\n\n  async setup() {\n    this.createScene();\n\n    this.envFbo = new THREE.WebGLRenderTarget(\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr\n    );\n    this.backfaceFbo = new THREE.WebGLRenderTarget(\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr\n    );\n\n    this.textCanvas = document.createElement(\"canvas\");\n    this.textCanvas.style = \"z-index: -1\";\n    this.renderText();\n\n    document.body.append(this.textCanvas);\n\n    this.quad = await this.createBackground();\n    this.scene.add(this.quad);\n\n    this.model = await this.createModel();\n    this.model.scale.set(.1, .1, .1);\n\n    this.scene.add(this.model);\n\n    this.camera.position.z = 5;\n    this.orthoCamera.position.z = 5;\n\n    window.addEventListener(\"resize\", this.resize);\n\n    this.addEvents();\n    this.render();\n  }\n\n  renderText() {\n    const ctx = this.textCanvas.getContext(\"2d\");\n    scaleCanvas(this.textCanvas, ctx, window.innerWidth, window.innerHeight);\n    const scale = Math.min(window.innerHeight, window.innerWidth);\n    ctx.font = `${0.2 * scale}px aeonik`;\n    ctx.fillStyle = \"white\";\n    ctx.textAlign = \"center\";\n\n    const OFFSET = scale * 0.15;\n    const yOFFSET = scale * 0.1;\n    ctx.fillText(\n      \"DIAMOND\",\n      this.textCanvas.width / 2,\n      this.textCanvas.height / 2 - OFFSET + yOFFSET\n    );\n\n    ctx.fillText(\n      \"HANDS\",\n      this.textCanvas.width / 2,\n      this.textCanvas.height / 2 + OFFSET + yOFFSET\n    );\n  }\n\n  createScene() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(\n      50,\n      this.vp.width / this.vp.height,\n      0.1,\n      1000\n    );\n    this.orthoCamera = new THREE.OrthographicCamera(\n      this.vp.width / -2,\n      this.vp.width / 2,\n      this.vp.height / 2,\n      this.vp.height / -2,\n      1,\n      1000\n    );\n\n    this.orthoCamera.layers.set(1);\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    this.renderer.setSize(this.vp.width, this.vp.height);\n    this.renderer.setPixelRatio(this.vp.dpr);\n    this.renderer.autoClear = false;\n    document.body.appendChild(this.renderer.domElement);\n  }\n\n  async createBackground() {\n    const loader = new THREE.TextureLoader();\n    loader.setCrossOrigin(\"\");\n    let texture = loader.load(this.textCanvas.toDataURL());\n\n    texture.needsUpdate = true;\n    const quad = new THREE.Mesh(\n      new THREE.PlaneGeometry(2, 2),\n      new THREE.ShaderMaterial({\n        uniforms: {\n          time: { value: 1.0 },\n          image: { type: \"t\", value: texture },\n          offset: { value: new THREE.Vector2()},\n          resolution: { value: new THREE.Vector2() },\n        },\n\n        vertexShader: `        void main() {\n          gl_Position = vec4( position, 1.0 );\n      }`,\n\n        fragmentShader: `#ifdef GL_ES\n        precision mediump float;\n        #endif\n        \n        uniform vec2 resolution;\n        uniform vec2 offset;\n        uniform float time;\n        uniform sampler2D image;\n              float random (in vec2 st) {\n            return fract(sin(dot(st.xy,\n                                 vec2(12.9898,78.233)))*\n                43758.5453123);\n        }\n        \n        void main() {\n          vec2 uv = gl_FragCoord.xy / resolution.xy;\n          float def = (cos((uv.x + 0.15*time) * 10.0)*0.01)-(sin((uv.y + 0.15*time) * 10.00)*0.01);\n          gl_FragColor= texture2D(image,  vec2(def + uv) - offset);\n        \n          \n        }`,\n      })\n    );\n\n    quad.layers.set(1);\n\n    quad.scale.set(this.vp.width, this.vp.height, 1);\n\n    return quad;\n  }\n\n  async createModel() {\n    this.refractionMaterial = new RefractionMaterial({\n      envMap: this.envFbo.texture,\n      backfaceMap: this.backfaceFbo.texture,\n      resolution: [this.vp.width * this.vp.dpr, this.vp.height * this.vp.dpr],\n    });\n\n    this.backfaceMaterial = new BackfaceMaterial();\n\n    let { model } = await loadModel(process.env.PUBLIC_URL + \"/diamond.glb\");\n    return model.children[0];\n  }\n\n  render(time) {\n    requestAnimationFrame(this.render);\n\n    this.renderer.clear();\n\n    this.velocity *= 0.87;\n\n    this.velocity2 *= 0.87;\n\n\n    this.model.rotation.y +=\n      this.velocity +\n      Math.sign(this.velocity) * 0.005 * (1 - Number(this.pointerDown));\n      this.model.rotation.z = Math.sin(time * .0001) * .5;\n\n      this.model.rotation.x +=\n      this.velocity2 +\n      Math.sign(this.velocity2) * 0.005 * (1 - Number(this.pointerDown));\n\n    // render env to fbo\n    this.renderer.setRenderTarget(this.envFbo);\n    this.renderer.render(this.scene, this.orthoCamera);\n    const scale = lerp(this.model.scale.x, .8, .05);\n    this.model.scale.set(scale, scale, scale);\n\n    // render cube backfaces to fbo\n    this.model.material = this.backfaceMaterial;\n    this.renderer.setRenderTarget(this.backfaceFbo);\n    this.renderer.clearDepth();\n    this.renderer.render(this.scene, this.camera);\n\n    // render env to screen\n    this.renderer.setRenderTarget(null);\n    this.renderer.render(this.scene, this.orthoCamera);\n    this.renderer.clearDepth();\n\n    // render cube with refraction material to screen\n    this.model.material = this.refractionMaterial;\n    this.renderer.render(this.scene, this.camera);\n\n    if (this.lastX) {\n      this.camera.position.x = lerp(this.camera.position.x, this.lastX, 0.1);\n      this.quad.material.uniforms.offset.value.x = lerp(this.quad.material.uniforms.offset.value.x, this.lastX * .1, 0.1);\n    }\n\n    if (this.lastY) {\n      this.camera.position.y = lerp(this.camera.position.y, this.lastY, 0.1);\n      this.quad.material.uniforms.offset.value.y = lerp(this.quad.material.uniforms.offset.value.y, this.lastY * .1, 0.1);\n\n    }\n\n    if (this.dx) {\n\n      this.quad.material.uniforms.time.value = lerp(this.quad.material.uniforms.time.value, this.quad.material.uniforms.time.value + Math.min(Math.abs(this.dx), 30), .001);\n\n\n    }\n    this.quad.material.uniforms.time.value += 0.015;\n\n    this.quad.material.uniforms.resolution.value = [\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr,\n    ];\n    this.renderText();\n  }\n\n  resize() {\n    this.vp.width = window.innerWidth;\n    this.vp.height = window.innerHeight;\n\n    this.renderer.setSize(this.vp.width, this.vp.height);\n    this.envFbo.setSize(\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr\n    );\n    this.backfaceFbo.setSize(\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr\n    );\n\n    this.quad.scale.set(this.vp.height * 2, this.vp.height, 1);\n\n    this.model.material.uniforms.resolution.value = [\n      this.vp.width * this.vp.dpr,\n      this.vp.height * this.vp.dpr,\n    ];\n\n    this.camera.aspect = this.vp.width / this.vp.height;\n    this.camera.updateProjectionMatrix();\n\n    this.orthoCamera.left = this.vp.width / -2;\n    this.orthoCamera.right = this.vp.width / 2;\n    this.orthoCamera.top = this.vp.height / 2;\n    this.orthoCamera.bottom = this.vp.height / -2;\n    this.orthoCamera.updateProjectionMatrix();\n\n    this.renderText();\n  }\n\n  handleMouseDown(e) {\n    this.pointerDown = true;\n    this.pointer.x = e.touches ? e.touches[0].clientX : e.clientX;\n\n    this.pointer.y = e.touches ? e.touches[0].clientY : e.clientY;\n\n  }\n\n  handleMouseMove = (e) => {\n    var now = Date.now();\n    var dx = e.screenX - this.lastMouseX;\n    this.dx = dx;\n    this.timestamp = now;\n    this.lastMouseX = e.screenX;\n    this.lastX = e.clientX / window.innerWidth - 0.5;\n    this.lastY = 0.5 * (1 - e.clientY / window.innerHeight);\n\n    if (!this.pointerDown) return;\n\n    const x = e.touches ? e.touches[0].clientX : e.clientX;\n    const y = e.touches ? e.touches[0].clientY : e.clientY;\n\n    this.velocity += (x - this.pointer.x) * 0.001;\n\n    this.pointer.x = x;\n\n    this.velocity2 += (y - this.pointer.y) * 0.001;\n\n    this.pointer.y = y;\n  };\n\n  handleMouseUp() {\n    this.pointerDown = false;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport Canvas from './Canvas';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\ndocument.fonts.onloadingdone = () => {\n  new Canvas();\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}